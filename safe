#!/bin/bash

# Create a data file, encrypt it with cryptsetup, format it with
# a filesystem and use 'safe' to easily open it and mount it for use,
# then unmount and lock it for secure and safe keeping.

# The primary purpose of this process is to keep data encrypted and
# secure most of the time.  Unlock it when you need it and lock it quickly
# afterwards.  If someone breaks into your system, they'll likely
# get away with encrypted data, but not raw data files of important
# information.

# This script must be run as root on some systems including Fedora 20
# because, it seems, of the way cryptsetup is built on those systems.

# See the github safe.md documentation for more information.

###################################################################
# Copyright 2014 Maxwell Spangler, maxwell@maxwellspangler.com

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the 
# Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
###################################################################

# Our version, update as changes are made.
VERSION="2014.0309.01"

# Static: define list of all safe names here. 
SAFE_LIST="notes legal personal"

function usage {
	echo
	echo "safe $VERSION"
	echo
	echo "Syntax: safe [list] [open|close|status] <safename|all>"
	echo
	echo "'open'   - open a safe"
	echo "'close'  - close a safe"
	echo "'status' - report the status of all safes"
	echo "'list'   - list available safes"
	echo
	echo "Example: safe open notes"
	echo
}

function list_safes {

	echo "'Safe' currently knows about these safes:"
	for EACH_SAFE in $SAFE_LIST
	do
		echo  "	-> '$EACH_SAFE'"
	done
	echo
}

# Set the two command line parameters: action and safe name
ACTION=${1:-"null"}
SAFE_NAME=${2:-"null"}

# If the user issues 'safe status' convert it to 'safe status all'
if [[ $ACTION == "status" || $ACTION == "list" ]] && [[ $SAFE_NAME == "null" ]]
then
	SAFE_NAME="all"
fi

if [[ $ACTION != "open" && $ACTION != "close" && $ACTION != "list" && $ACTION != "status" ]]
then
	echo "You must specify an action of 'list', 'status', 'open' or 'close'"
	usage
	exit 1
fi

if [[ $SAFE_NAME == "null" ]]
then
	echo "You must specify a valid safe name."
	usage
	exit 1
fi

# Check for $2 within $1. Return 0 if not found, or position of $2
function strindex { 
  x="${1%%$2*}"
  [[ $x = $1 ]] && echo -1 || echo ${#x}
}

# Check for user supplied safe name within list of defined safes
if [[ $SAFE_NAME != "all" ]]
then

	SAFE_CHECK=$(strindex "$SAFE_LIST" "$SAFE_NAME")

	if [[ $? == -1 ]]
	then
		echo "You must specify a valid safe name."
		usage
		exit 1
	fi
fi

# Associate a safe name with required parameters in set_safe_parameters
function set_safe_parameters {

	# default our return variable to error, set it when good
	SET_SAFE_RETURN="error"

#
# This case statement works for now but will be converted into
# an external config file of some sort in the future.
#

	case $SAFE_NAME in

		# Private notes
		"notes")
			# only user who can access them
			USER="maxwell"

			# Location of encrypted LUKS file
			SOURCE_FILE="/home/maxwell/Documents/Safes/notes.luks"

			# Unlock with LUKS and map to this in /dev/mapper
			UNLOCKED_MAPPING="notes-luks"

			# Mount the filesystem at this location
			MOUNT_POINT="/mnt/secure/notes"

			SET_SAFE_RETURN="success";;

		# Legal Documents
		"legal")
			# only user who can access them
			USER="maxwell"

			# Location of encrypted LUKS file
			SOURCE_FILE="/home/maxwell/Documents/Safes/legal.luks"

			# Unlock with LUKS and map to this in /dev/mapper
			UNLOCKED_MAPPING="legal-luks"

			# Mount the filesystem at this location
			MOUNT_POINT="/mnt/secure/legal"

			SET_SAFE_RETURN="success";;

		# Personal Documents
		"personal")
			# only user who can access them
			USER="maxwell"

			# Location of encrypted LUKS file
			SOURCE_FILE="/home/maxwell/Documents/Safes/personal.luks"

			# Unlock with LUKS and map to this in /dev/mapper
			UNLOCKED_MAPPING="personal-luks"

			# Mount the filesystem at this location
			MOUNT_POINT="/mnt/secure/personal"

			SET_SAFE_RETURN="success";;

		*)
			# This function has been called with an unknown safe, return error
			SET_SAFE_RETURN="error"

	esac

}

# Open a single safe data file
function open_safe {

	# Before opening, see if we have a source data file to open
	if [[ ! -f "$SOURCE_FILE" ]]
	then
		echo "I can't locate a data file for safe $SAFE_NAME at $SOURCE_FILE"
	else

		# Is the safe unlocked?
		if [[ -h /dev/mapper/$UNLOCKED_MAPPING ]]
		then

#		# See if the safe is already open and in use
#		STATUS=$(cryptsetup status $UNLOCKED_MAPPING | grep "is in use" | wc -l)

		# If already open, report to user and show some use information
		#if [[ $STATUS -gt 0 ]]
		#then

			echo "Safe $SAFE_NAME is already open."
			cryptsetup status $UNLOCKED_MAPPING

		else

			# Unlock the encrypted file's contents
			cryptsetup luksOpen $SOURCE_FILE $UNLOCKED_MAPPING

			# If the unlock operation was not successful, report to user
			# Note: this is in addition to cryptsetup's own error reporting
			if (( $? != 0 ))
			then
				echo "Error $?"
				echo "Unable to open $SOURCE_FILE"
				exit 1

			fi

		fi

		# See if the safe is mounted. If yes, we'll try to unmount it
		if [[ $(mount | grep $UNLOCKED_MAPPING | grep $MOUNT_POINT | wc -l) -gt 0 ]]
		then
			echo "Safe '$SAFE_NAME' is already mounted at $UNLOCKED_MAPPING"

		else

			# If the mount point does not exist, let's try to make it.
			if [[ ! -d $MOUNT_POINT ]]
			then

				# Check to see if we have a /mnt directory
				# If we don't, don't make one.
				if [[ -d /mnt ]]
				then

					# We have mnt, but maybe nothing else, so make it.
					mkdir -p $MOUNT_POINT

					# Change the owner of this mount point to our explicit user
					chown $USER $MOUNT_POINT

					# Disallow access by any other users
					chmod og-rwx $MOUNT_POINT
				else

					# We can't make a directory in /mnt because no /mnt
					echo "ERROR: There is no /mnt directory on this system."
					exit 1
				fi
				echo "WARNING: Created $MOUNT_POINT for you."
			fi

			# Mount the unlocked file's embedded filesystem
			mount /dev/mapper/$UNLOCKED_MAPPING $MOUNT_POINT

			# If the mount was unsuccessful, handle the error
			if (( $? != 0 ))
			then
				echo "Unable to mount $UNLOCKED_MAPPING at $MOUNT_POINT"
				exit 1
			else

				# Success: Filesystem data is now available.
				echo "Your files are now available at $MOUNT_POINT"
				echo "Issue safe-close $SAFE_NAME to close it"
				echo

			fi

		fi # Block: Attempt to mount safe

	fi # block: Check to see if SOURCE_FILE for safe exists
}

# Close a single safe data file
function close_safe {

	# Close process:
	#   - Check to see if the safe is open.  If closed we do nothing.
	#   - If the safe is open:
	#   -   Check to see if its mounted.  If mounted, unmount.
	#   -   Lock the safe to secure the data

	# Is the safe unlocked?
	if [[ -h /dev/mapper/$UNLOCKED_MAPPING ]]
	then

		# See if the safe is mounted. If yes, we'll try to unmount it
		if [[ $(mount | grep $UNLOCKED_MAPPING | grep $MOUNT_POINT | wc -l) -gt 0 ]]
		then

			# Attempt to unmount
			umount "$MOUNT_POINT"

			# Handle errors resulting from the unmount
			if (( $? != 0 ))
			then
				echo "Unable to unmount $MOUNT_POINT"
			fi
		else
			echo "The safe is unlocked but not mounted. Skipping unmount."
		fi

		# Close the safe to secure it
		cryptsetup luksClose $UNLOCKED_MAPPING

		# Handle errors resulting from our close
		if (( $? != 0 ))
		then
			echo "Unable to unmount $MOUNT_POINT"
		else

			echo "The safe $SAFE_NAME is now closed and locked."
			echo
		fi

	else

		echo -e "\nSafe '$SAFE_NAME' is not currently open."

	fi
}

# Report the status of a safe
function status_safe {

	echo -e "\n== Safe '$SAFE_NAME' =="

	if [[ -h /dev/mapper/$UNLOCKED_MAPPING ]]
	then

		# Report the detailed status via cryptsetup
		cryptsetup status $UNLOCKED_MAPPING

		mount | grep $UNLOCKED_MAPPING

	else

		echo -e "\nSafe '$SAFE_NAME' is not currently open."

	fi

}

# Actions are taken by iterating on all safes in SAFE_LIST.
# This list is defined earlier just above set_safe_parameters
# If the user did not specify "all" safes, then set the value of
# SAFE_LIST to the single user specified safe name
# and we will iterate over that single safe file with our actions.
if [[ $SAFE_NAME != "all" ]]
then
	# Replace list of all safes with the single user specified safe name
	SAFE_LIST=$SAFE_NAME
fi

# Go through list of safes defined in SAFE_LIST
for EACH_SAFE in $SAFE_LIST
do

	# Act as though user specified a safe name
	SAFE_NAME=$EACH_SAFE

	# Set the related safe parameters
	set_safe_parameters

	# If we were able to set safe parameters
	if [[ $SET_SAFE_RETURN == "success" ]]
	then

		# Open or Close?
		case $ACTION in

			# Open a safe
			"open")
				open_safe;;

			# Close a safe
			"close")
				close_safe;;

			# List the status of a safe
			"status")
				status_safe;;

			# List known safes
			"list")
				list_safes

				# Instead of iterating over each item in $SAFE_LIST
				# as we do for all other commands, we'll call list_safes
				# once then break out and exit.
				break;;

		esac

	else
		echo "I don't know of a safe called '$SAFE_NAME'"
		echo

	fi

done # iterate over each safe in SAFE_LIST loop
