#!/bin/bash

# Our version, update as changes are made.
VERSION="2.0.4"
VERSION="2023-0816"

CONFIG_FILE=/home/${USERNAME}/.safe.conf

# Global Scope
SAFE_DIRECTORY=""
SAFE_INFO=""
SAFE_NAME=""
SAFE_USER=""
SAFE_MAPPER=""
SAFE_MOUNT=""
SAFE_FILENAME=""
SAFE_OPEN="no"

function verify_running_as_root {
	# Bash variable UID returns the user id # of the user
	# Running as root, or running this script using sudo should return user 0
	SUDO_USER="null"
	if [ $UID != 0 ]
	then
		echo "You must be root or use 'sudo' to enable safe to work."
		exit 1
	else
		# When this script is called using 'sudo' OR 'su' this records
		# the name of the non-root user so we can set security to this
		# user on our output files. Same as 'who am i'
		SUDO_USER=$(who -m | awk '{ print $1 }')
	fi
}

function usage {
	echo
	echo "safe $VERSION $VERSION_DATE"
	echo
	echo "Syntax: safe [list] [open|close|status] <safename>"
	echo
	echo "'open'   - open a safe"
	echo "'close'  - close a safe"
	echo "'status' - report the status of all safes"
	echo "'list'   - list available safes"
	echo
	echo "Example: safe open notes"
	echo
	echo "Warning: Safe names must not contain spaces."
	echo
}

function validate_config_file {

	if [[ ! -r $CONFIG_FILE ]]
	then
		if [[ ! -f $CONFIG_FILE ]]
		then
			echo "ERROR: Config file $CONFIG_FILE does not exist."
		else
			echo "ERROR: Config file $CONFIG_FILE is not readable."
		fi
  fi
}

function get_safe_directory {
	SAFE_DIRECTORY=""

	SD_COUNT=$(grep -E '^safe_directory' $CONFIG_FILE | wc -l)
	if [[ $SD_COUNT == 0 ]]
	then
		echo "ERROR: There are no 'safe_directory' declarations in $CONFIG_FILE"
		exit 1
	fi

	if [[ $SD_COUNT -gt 1 ]]
	then
		echo "ERROR: There are more then one 'safe_directory' declarations in $CONFIG_FILE"
		exit 1
	fi

	SAFE_DIRECTORY=$(grep -E '^safe_directory' $CONFIG_FILE | awk '{print $2}')

}

function get_safe_info {

	if [[ -z $1 ]]
	then
		echo "ERROR: No safe name passed to get_safe_info"
		exit 1
	else
		VALID_SAFE=false
		SAFE_INFO=""
		SAFE_NAME=""
		SAFE_USER=""
		SAFE_MAPPER=""
		SAFE_MOUNT=""
		SAFE_FILENAME=""
		SAFE_OPEN="no"

		#FOUND_COUNT=$(grep -E '^safe_file $1' $CONFIG_FILE | grep $1 | wc -l)
		# Grep for line that defines a safe plus the safe name
		FOUND_COUNT=$(grep -E "^safe_file $1" $CONFIG_FILE | wc -l)

		if [[ $FOUND_COUNT == 1 ]]
		then
			VALID_SAFE=true

			# Grep for line that defines a safe plus the safe name
			SAFE_INFO=$(grep -E "^safe_file $1" $CONFIG_FILE)

			SAFE_NAME=$(echo $SAFE_INFO | awk '{print $2}')
			SAFE_USER=$(echo $SAFE_INFO | awk '{print $3}')
			SAFE_MAPPER=$(echo $SAFE_INFO | awk '{print $4}')
			SAFE_MOUNT=$(echo $SAFE_INFO | awk '{print $5}')
			SAFE_FILENAME=$(echo $SAFE_INFO | awk '{print $6}')

			if [[ -h /dev/mapper/$SAFE_MAPPER ]]
			then
				SAFE_OPEN="yes"
			else
				SAFE_OPEN="no"
			fi
		fi
	fi
}

function report_header {
	printf "%-10s %-4s %-10s %-15s %-25s %-15s\n" "Safe" "Open" "User" "Map Name" "Mount point" "Filename"
	printf "%-10s %-4s %-10s %-15s %-25s %-15s\n" "----" "----" "----" "--------" "-----------" "--------"
}

function report_detail {
	printf "%-10s %-4s %-10s %-15s %-25s %-15s\n" $SAFE_NAME $SAFE_OPEN $SAFE_USER $SAFE_MAPPER $SAFE_MOUNT $SAFE_FILENAME
}

function list_safes {

	# From all config file lines that define safes, list the safes' names

	FILE_COUNT=$(grep -E '^safe_file' $CONFIG_FILE | awk {'print $2'} | wc -l)
	if [[ $FILE_COUNT == 0 ]]
  then
		echo "ERROR: There are no safes defined as 'safe_file' items in $CONFIG_FILE"
		exit 1
  else
		report_header
		FILE_LIST=$(grep -E '^safe_file' $CONFIG_FILE | awk {'print $2'})
		for EACH_SAVE in $FILE_LIST
		do
			get_safe_info $EACH_SAVE
			report_detail
		done
  fi
}

# Open a single safe data file
function open_safe {

	get_safe_info $1

	if [[ $VALID_SAFE == no ]]
	then
		echo "ERROR: $1 is not a valid safe that can be opened"
		exit 1
	else

		if [[ $SAFE_OPEN == "yes" ]]
		then
			echo "ERROR: Safe $1 is already open"
			status_safe $1
			exit 1
		fi

		if [[ ! -r $SAFE_DIRECTORY/$SAFE_FILENAME ]]
		then
			if [[ ! -f $SAFE_DIRECTORY/$SAFE_FILENAME ]]
			then
				echo "ERROR: Safe file $SAFE_FILENAME does not exist"
				exit 1
			else
				echo "ERROR: Safe file $SAFE_FILENAME is not readable"
				exit 1
			fi
		fi

		cryptsetup luksOpen $SAFE_DIRECTORY/$SAFE_FILENAME $SAFE_MAPPER

		if [[ $? != 0 ]]
		then
			echo "ERROR $? while using cryptsetup to open $1 at $SAFE_DIRECTORY/$SAFE_FILENAME"
			exit 1
		fi

		if [[ $(mount | grep $SAFE_MOUNT | wc -l) -gt 0 ]]
		then
			echo "ERROR: Something is already mounted at $SAFE_MOUNT"
			echo
			mount | grep $SAFE_MOUNT
			exit 1
		else

			if [[ ! -d $SAFE_MOUNT ]]
			then
				echo "Info: Mount point $SAFE_MOUNT does not exist.  Creating it now."
				mkdir -p $SAFE_MOUNT
				echo "Setting owner of $SAFE_MOUNT as $SAFE_USER"
				chown $SAFE_USER $SAFE_MOUNT
				echo "Setting security permissions to exclude others on $SAFE_MOUNT"
				chmod og-rwx $SAFE_MOUNT
			fi

			mount /dev/mapper/$SAFE_MAPPER $SAFE_MOUNT

			if [[ $? != 0 ]]
			then
				echo "ERROR: Unable to mount $SAFE_MAPPER at $SAFE_MOUNT"
				exit 1
			else
				mount | grep $SAFE_MOUNT
				echo
				df -h | grep '^Filesystem'
				df -h | grep $SAFE_MOUNT
				echo
				echo "Your files are now available at $SAFE_MOUNT"
				echo "REMEMBER TO CLOSE IT with: 'safe close $1'"
			fi
		fi
	fi
}

function close_safe {

	get_safe_info $1

	if [[ $VALID_SAFE == false ]]
	then
		echo "ERROR: $1 is not a valid safe for closing."
		exit 1
	fi

	if [[ $SAFE_OPEN == "no" ]]
	then
		echo "ERROR: This safe does not appear to be open"
		echo "Mapper check:"
		ls -ld /dev/mapper/$SAFE_MAPPER
		echo "Mount check:"
		mount | grep $SAFE_MAPPER
	fi

	umount $SAFE_MOUNT
	if [[ $? != 0 ]]
	then
		echo "ERROR: $? while trying to unmont $SAFE_MOUNT"
		exit 1
	else
		echo "Mount check after unmounting:"
		mount | grep $SAFE_MOUNT
	fi

	cryptsetup luksClose $SAFE_MAPPER
	if [[ $? != 0 ]]
	then
		echo "ERROR: $? while trying to luksClose $SAFE_MAPPER"
		exit 1
	else
		status_safe $1
	fi
}

# Report the status of a safe
function status_safe {

	get_safe_info $1
	if [[ $VALID_SAFE == true ]]
	then
		report_header
		report_detail
		echo

		if [[ ! -r $SAFE_DIRECTORY/$SAFE_FILENAME ]]
		then
			if [[ ! -f $SAFE_DIRECTORY/$SAFE_FILENAME ]]
			then
				echo "ERROR: Safe file $SAFE_DIRECTORY/$SAFE_FILENAME does not exist"
			else
				echo "ERROR: Safe file $SAFE_DIRECTORY/$SAFE_FILENAME is not readable"
			fi
		else
			ls -lh $SAFE_DIRECTORY/$SAFE_FILENAME
		fi
		echo
		echo "Cryptsetup status:"
		cryptsetup status $SAFE_MAPPER
	else
		echo "ERROR: Safe $1 is not a recognized safe name."
	fi
}

#
# Main Operation
#

# Safe can't execute cryptsetup calls to open or close safe files
# unless it has root privileges, so check and exit if not
verify_running_as_root

validate_config_file

get_safe_directory

PARM1=${1:-"_null"}
if [[ $PARM1 == "_null" ]]
then
	echo "ERROR: Please specify an action."
	usage
	exit 1
else

	case $PARM1 in

		"open")
			shift
			open_safe $1;;

		"close")
			shift
			close_safe $1;;

		"status")
			shift
			status_safe $1;;

		# List known safes
		"list")
			list_safes;;

		*)
		echo "ERROR: I don't know what $1 means."
		usage
		exit 1;

	esac
fi
